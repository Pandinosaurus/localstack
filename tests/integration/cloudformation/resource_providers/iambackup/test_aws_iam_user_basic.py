# flake8: noqa
"""
You MUST NOT add your own tests here. If you want to do additional checks, put them into `test_aws_iam_user_parity.py`.

The tests here are meant as the most basic common test skeleton for a minimal resource provider implementation.
"""
import os

import pytest

from localstack.aws.connect import ServiceLevelClientFactory
from localstack.testing.aws.util import is_aws_cloud
from localstack.testing.pytest.fixtures import StackDeployError
from localstack.utils.strings import short_uid

# pytestmark = [pytest.mark.skip(reason="in progress")]


class TestBasic:
    def test_basic_lifecycle(
        self,
        aws_client,
        deploy_cfn_template,
        snapshot,
    ):
        """
        A basic lifecycle test for the resource type.

        Scenario:
            1. Create a stack with a minimal template (including the target resource + a minimal set of supporting resources)
            2. Verify deployment of resource via direct service API calls (e.g. aws_client.ssm.get_parameter for AWS::SSM::Parameter)
            3. Delete the stack
            4. Verify resource has been deleted as well using the same logic used in step 2
        """
        user_name = f"test-user-{short_uid()}"
        stack = deploy_cfn_template(
            template_path=os.path.join(
                os.path.dirname(__file__),
                "./templates/user_basic.yaml",
            ),
            parameters={"CustomUserName": user_name},
        )
        snapshot.match("stack_outputs", stack.outputs)

        # verify resource deployment
        aws_client.iam.get_user(UserName=user_name)

        # check physical resource id
        res = aws_client.cloudformation.describe_stack_resource(
            StackName=stack.stack_name, LogicalResourceId="MyResource"
        )["StackResourceDetail"]
        snapshot.match("physical_resource_id", res.get("PhysicalResourceId"))

        snapshot.add_transformer(snapshot.transform.regex(user_name, "<user-name>"))

        # delete and make sure resource is deleted

        stack.destroy()

        with pytest.raises(aws_client.iam.exceptions.NoSuchEntityException) as e:
            aws_client.iam.get_user(UserName=user_name)

    def test_autogenerated_values(self, aws_client, deploy_cfn_template):
        stack = deploy_cfn_template(
            template_path=os.path.join(
                os.path.dirname(__file__),
                "./templates/user_basic_autogenerated_name.yaml",
            ),
        )
        # we've already verified in `test_basic_lifecycle` that the ref will refer to the user name
        generated_user_name = stack.outputs["MyRef"]

        logical_resource_id = "MyResource"
        assert logical_resource_id in generated_user_name
        assert stack.stack_name in generated_user_name

        # verify resource has been correctly deployed with the autogenerated field
        aws_client.iam.get_user(UserName=generated_user_name)


class TestBasicUpdates:
    def test_update_with_replacement(
        self,
        aws_client,
        deploy_cfn_template,
        snapshot,
    ):
        """
        A simple update that causes the resource to be replaced.

        You can check in the CloudFormation documentation or use one of the `createOnlyProperties` to trigger this behavior.
        """
        user_name = f"test-user-{short_uid()}"
        path_to_template = os.path.join(os.path.dirname(__file__), "./templates/basic.yaml")
        stack = deploy_cfn_template(
            template_path=path_to_template,
            parameters={"CustomUserName": user_name},
        )
        snapshot.match("stack_outputs", stack.outputs)

        # verify resource deployment
        aws_client.iam.get_user(UserName=user_name)

        modified_user_name = f"{user_name}-v2"

        deploy_cfn_template(
            is_update=True,
            template_path=path_to_template,
            stack_name=stack.stack_name,
            parameters={"CustomUserName": modified_user_name},
        )

        aws_client.iam.get_user(UserName=modified_user_name)
        with pytest.raises(aws_client.iam.exceptions.NoSuchEntityException):
            aws_client.iam.get_user(UserName=user_name)

    def test_update_without_replacement(self, aws_client, deploy_cfn_template, snapshot):
        """
        A simple update that updates the resource in-place where the physical resource ID won't change, so the resource does not have to be deleted and re-created
        """
        user_name = f"test-user-{short_uid()}"
        path_to_template = os.path.join(os.path.dirname(__file__), "./templates/user_basic.yaml")
        stack = deploy_cfn_template(
            template_path=path_to_template,
            parameters={"CustomUserName": user_name},
        )
        snapshot.match("stack_outputs", stack.outputs)

        # verify resource deployment
        aws_client.iam.get_user(UserName=user_name)

        modified_user_name = f"{user_name}-v2"

        deploy_cfn_template(
            is_update=True,
            template_path=path_to_template,
            stack_name=stack.stack_name,
            parameters={"CustomUserName": modified_user_name},
        )

        aws_client.iam.get_user(UserName=modified_user_name)
        with pytest.raises(aws_client.iam.exceptions.NoSuchEntityException):
            aws_client.iam.get_user(UserName=user_name)
